generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  email             String             @unique
  username          String             @unique
  password          String
  phone             String
  image             String?
  bio               String?
  link              String?
  city              String?
  firstname         String?
  lastname          String?
  isVerified        String             @default("false")
  userType          user_type          @default(Regular)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  followers         String[]
  following         String[]
  followingCards    String[]
  devices           String[]
  tokens            Token[]
  cards             Card[]
  chatNotifications ChatNotification[]
  senderUser        ChatMessages[]     @relation(name: "senderUser")
  receiverUser      ChatMessages[]     @relation(name: "receiverUser")
}

model ChatNotification {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  email             String
  User              User?   @relation(fields: [userId], references: [id])
  userId            String? @db.ObjectId
  notificationCount Int
}

model Otp {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  opt       String
  createdAt String
  expiresAt String
}

model SignUpToken {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String
  createdAt String
  expiresAt String
}

model Card {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  username      String?
  title         String
  handle        String
  flaged        Boolean      @default(false)
  suspended     Boolean      @default(false)
  association   String?
  complications String[]
  cardAccess    card_access  @default(Public)
  typeOfCard    type_of_card @default(Person)
  cardRegAs     card_reg_as  @default(Regular)
  image         String?
  tagLine       String?
  article       String?
  directMsgs    DirectMsg[]
  User          User?        @relation(fields: [userId], references: [id])
  userId        String?      @db.ObjectId
  followers     String[]
  posts         Post[]
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  body      String?
  image     String?
  link      String?
  flaged    Boolean    @default(false)
  likes     String[]
  disLikes  String[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Card      Card?      @relation(fields: [cardId], references: [id])
  cardId    String?    @db.ObjectId
  comments  Comments[]
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  body      String
  likes     String[]
  disLikes  String[]
  reply     String?
  userImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
}

model Quiz {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatSocketUserMap {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String
  socketId String
}

model ChatMessages {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  senderId    String       @db.ObjectId
  sender      User         @relation(fields: [senderId], references: [id], name: "senderUser")
  receiverId  String       @db.ObjectId
  receiver    User         @relation(fields: [receiverId], references: [id], name: "receiverUser")
  message     String
  docUrl      String
  messageType message_type @default(TEXT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

type Token {
  id    String  @map("_id") @db.ObjectId
  token String?
}

type DirectMsg {
  id        String   @map("_id") @db.ObjectId
  msg       String?
  sender    String?
  createdAt DateTime @default(now())
}

enum message_type {
  TEXT
  IMAGE
}

enum user_type {
  Regular
  Mode
  Admin
  SuperAdmin
}

enum type_of_card {
  Actor
  Person
  Event
}

enum card_reg_as {
  Regular
  Personal
}

enum card_access {
  Public
  Private
  FollowersOnly
  FollowingOnly
}
